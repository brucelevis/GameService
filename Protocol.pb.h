// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef PROTOBUF_Protocol_2eproto__INCLUDED
#define PROTOBUF_Protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonConfig.pb.h"
#include "CommonProperty.pb.h"
// @@protoc_insertion_point(includes)

namespace real {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Protocol_2eproto();
void protobuf_AssignDesc_Protocol_2eproto();
void protobuf_ShutdownFile_Protocol_2eproto();

class Meta;
class EnterGame;
class PlayerList;
class PlayerInfo;
class MutableProperty;

enum ErrorCode {
  ERROR_SUCCESS = 1,
  ERROR_LOAD = 2
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR_SUCCESS;
const ErrorCode ErrorCode_MAX = ERROR_LOAD;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum MetaType {
  META_TYPE_C2S_BEGIN = 1,
  META_TYPE_C2S_SELECT_SERVER = 3,
  META_TYPE_C2S_CREATE_PLAYER = 4,
  META_TYPE_C2S_ENTER_GAME = 5,
  META_TYPE_C2S_ENTER_SCENE = 6,
  META_TYPE_C2S_MOVE = 7,
  META_TYPE_C2S_COUNT = 500,
  META_TYPE_S2C_BEGIN = 501,
  META_TYPE_S2C_TICKET = 502,
  META_TYPE_S2C_SERVER_LIST = 503,
  META_TYPE_S2C_PLAYERS = 504,
  META_TYPE_S2C_PLAYER_INFO = 505,
  META_TYPE_S2C_MUTABLE_PROPERTY = 506,
  META_TYPE_S2C_ERROR = 507,
  META_TYPE_S2C_COUNT = 1000
};
bool MetaType_IsValid(int value);
const MetaType MetaType_MIN = META_TYPE_C2S_BEGIN;
const MetaType MetaType_MAX = META_TYPE_S2C_COUNT;
const int MetaType_ARRAYSIZE = MetaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetaType_descriptor();
inline const ::std::string& MetaType_Name(MetaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetaType_descriptor(), value);
}
inline bool MetaType_Parse(
    const ::std::string& name, MetaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetaType>(
    MetaType_descriptor(), name, value);
}
// ===================================================================

class Meta : public ::google::protobuf::Message {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  void Swap(Meta* other);

  // implements Message ----------------------------------------------

  Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .real.MetaType type_t = 1;
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::real::MetaType type_t() const;
  inline void set_type_t(::real::MetaType value);

  // optional bytes stuff = 2;
  inline bool has_stuff() const;
  inline void clear_stuff();
  static const int kStuffFieldNumber = 2;
  inline const ::std::string& stuff() const;
  inline void set_stuff(const ::std::string& value);
  inline void set_stuff(const char* value);
  inline void set_stuff(const void* value, size_t size);
  inline ::std::string* mutable_stuff();
  inline ::std::string* release_stuff();
  inline void set_allocated_stuff(::std::string* stuff);

  // @@protoc_insertion_point(class_scope:real.Meta)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_stuff();
  inline void clear_has_stuff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stuff_;
  int type_t_;
  friend void  protobuf_AddDesc_Protocol_2eproto();
  friend void protobuf_AssignDesc_Protocol_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2eproto();

  void InitAsDefaultInstance();
  static Meta* default_instance_;
};
// -------------------------------------------------------------------

class EnterGame : public ::google::protobuf::Message {
 public:
  EnterGame();
  virtual ~EnterGame();

  EnterGame(const EnterGame& from);

  inline EnterGame& operator=(const EnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGame& default_instance();

  void Swap(EnterGame* other);

  // implements Message ----------------------------------------------

  EnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGame& from);
  void MergeFrom(const EnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .real.MetaType type_t = 1 [default = META_TYPE_C2S_ENTER_GAME];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::real::MetaType type_t() const;
  inline void set_type_t(::real::MetaType value);

  // optional int64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:real.EnterGame)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_player_id();
  inline void clear_has_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 player_id_;
  int type_t_;
  friend void  protobuf_AddDesc_Protocol_2eproto();
  friend void protobuf_AssignDesc_Protocol_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2eproto();

  void InitAsDefaultInstance();
  static EnterGame* default_instance_;
};
// -------------------------------------------------------------------

class PlayerList : public ::google::protobuf::Message {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerList& default_instance();

  void Swap(PlayerList* other);

  // implements Message ----------------------------------------------

  PlayerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_PLAYERS];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::real::MetaType type_t() const;
  inline void set_type_t(::real::MetaType value);

  // repeated .real.Player players = 2;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::real::Player& players(int index) const;
  inline ::real::Player* mutable_players(int index);
  inline ::real::Player* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::real::Player >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::real::Player >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:real.PlayerList)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::real::Player > players_;
  int type_t_;
  friend void  protobuf_AddDesc_Protocol_2eproto();
  friend void protobuf_AssignDesc_Protocol_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerList* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();

  PlayerInfo(const PlayerInfo& from);

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();

  void Swap(PlayerInfo* other);

  // implements Message ----------------------------------------------

  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_PLAYER_INFO];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::real::MetaType type_t() const;
  inline void set_type_t(::real::MetaType value);

  // optional .real.Player player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::real::Player& player() const;
  inline ::real::Player* mutable_player();
  inline ::real::Player* release_player();
  inline void set_allocated_player(::real::Player* player);

  // @@protoc_insertion_point(class_scope:real.PlayerInfo)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::real::Player* player_;
  int type_t_;
  friend void  protobuf_AddDesc_Protocol_2eproto();
  friend void protobuf_AssignDesc_Protocol_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MutableProperty : public ::google::protobuf::Message {
 public:
  MutableProperty();
  virtual ~MutableProperty();

  MutableProperty(const MutableProperty& from);

  inline MutableProperty& operator=(const MutableProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MutableProperty& default_instance();

  void Swap(MutableProperty* other);

  // implements Message ----------------------------------------------

  MutableProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MutableProperty& from);
  void MergeFrom(const MutableProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_MUTABLE_PROPERTY];
  inline bool has_type_t() const;
  inline void clear_type_t();
  static const int kTypeTFieldNumber = 1;
  inline ::real::MetaType type_t() const;
  inline void set_type_t(::real::MetaType value);

  // optional int64 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 player_id() const;
  inline void set_player_id(::google::protobuf::int64 value);

  // optional int32 speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional int32 orientation = 4;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  inline ::google::protobuf::int32 orientation() const;
  inline void set_orientation(::google::protobuf::int32 value);

  // optional .real.Vector3 position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline const ::real::Vector3& position() const;
  inline ::real::Vector3* mutable_position();
  inline ::real::Vector3* release_position();
  inline void set_allocated_position(::real::Vector3* position);

  // @@protoc_insertion_point(class_scope:real.MutableProperty)
 private:
  inline void set_has_type_t();
  inline void clear_has_type_t();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 player_id_;
  int type_t_;
  ::google::protobuf::int32 speed_;
  ::real::Vector3* position_;
  ::google::protobuf::int32 orientation_;
  friend void  protobuf_AddDesc_Protocol_2eproto();
  friend void protobuf_AssignDesc_Protocol_2eproto();
  friend void protobuf_ShutdownFile_Protocol_2eproto();

  void InitAsDefaultInstance();
  static MutableProperty* default_instance_;
};
// ===================================================================


// ===================================================================

// Meta

// optional .real.MetaType type_t = 1;
inline bool Meta::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Meta::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Meta::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Meta::clear_type_t() {
  type_t_ = 1;
  clear_has_type_t();
}
inline ::real::MetaType Meta::type_t() const {
  // @@protoc_insertion_point(field_get:real.Meta.type_t)
  return static_cast< ::real::MetaType >(type_t_);
}
inline void Meta::set_type_t(::real::MetaType value) {
  assert(::real::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:real.Meta.type_t)
}

// optional bytes stuff = 2;
inline bool Meta::has_stuff() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Meta::set_has_stuff() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Meta::clear_has_stuff() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Meta::clear_stuff() {
  if (stuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_->clear();
  }
  clear_has_stuff();
}
inline const ::std::string& Meta::stuff() const {
  // @@protoc_insertion_point(field_get:real.Meta.stuff)
  return *stuff_;
}
inline void Meta::set_stuff(const ::std::string& value) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(value);
  // @@protoc_insertion_point(field_set:real.Meta.stuff)
}
inline void Meta::set_stuff(const char* value) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(value);
  // @@protoc_insertion_point(field_set_char:real.Meta.stuff)
}
inline void Meta::set_stuff(const void* value, size_t size) {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  stuff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:real.Meta.stuff)
}
inline ::std::string* Meta::mutable_stuff() {
  set_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stuff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:real.Meta.stuff)
  return stuff_;
}
inline ::std::string* Meta::release_stuff() {
  clear_has_stuff();
  if (stuff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stuff_;
    stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Meta::set_allocated_stuff(::std::string* stuff) {
  if (stuff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stuff_;
  }
  if (stuff) {
    set_has_stuff();
    stuff_ = stuff;
  } else {
    clear_has_stuff();
    stuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:real.Meta.stuff)
}

// -------------------------------------------------------------------

// EnterGame

// optional .real.MetaType type_t = 1 [default = META_TYPE_C2S_ENTER_GAME];
inline bool EnterGame::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGame::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGame::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGame::clear_type_t() {
  type_t_ = 5;
  clear_has_type_t();
}
inline ::real::MetaType EnterGame::type_t() const {
  // @@protoc_insertion_point(field_get:real.EnterGame.type_t)
  return static_cast< ::real::MetaType >(type_t_);
}
inline void EnterGame::set_type_t(::real::MetaType value) {
  assert(::real::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:real.EnterGame.type_t)
}

// optional int64 player_id = 2;
inline bool EnterGame::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGame::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGame::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGame::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 EnterGame::player_id() const {
  // @@protoc_insertion_point(field_get:real.EnterGame.player_id)
  return player_id_;
}
inline void EnterGame::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:real.EnterGame.player_id)
}

// -------------------------------------------------------------------

// PlayerList

// optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_PLAYERS];
inline bool PlayerList::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerList::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerList::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerList::clear_type_t() {
  type_t_ = 504;
  clear_has_type_t();
}
inline ::real::MetaType PlayerList::type_t() const {
  // @@protoc_insertion_point(field_get:real.PlayerList.type_t)
  return static_cast< ::real::MetaType >(type_t_);
}
inline void PlayerList::set_type_t(::real::MetaType value) {
  assert(::real::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:real.PlayerList.type_t)
}

// repeated .real.Player players = 2;
inline int PlayerList::players_size() const {
  return players_.size();
}
inline void PlayerList::clear_players() {
  players_.Clear();
}
inline const ::real::Player& PlayerList::players(int index) const {
  // @@protoc_insertion_point(field_get:real.PlayerList.players)
  return players_.Get(index);
}
inline ::real::Player* PlayerList::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:real.PlayerList.players)
  return players_.Mutable(index);
}
inline ::real::Player* PlayerList::add_players() {
  // @@protoc_insertion_point(field_add:real.PlayerList.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::real::Player >&
PlayerList::players() const {
  // @@protoc_insertion_point(field_list:real.PlayerList.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::real::Player >*
PlayerList::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:real.PlayerList.players)
  return &players_;
}

// -------------------------------------------------------------------

// PlayerInfo

// optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_PLAYER_INFO];
inline bool PlayerInfo::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_type_t() {
  type_t_ = 505;
  clear_has_type_t();
}
inline ::real::MetaType PlayerInfo::type_t() const {
  // @@protoc_insertion_point(field_get:real.PlayerInfo.type_t)
  return static_cast< ::real::MetaType >(type_t_);
}
inline void PlayerInfo::set_type_t(::real::MetaType value) {
  assert(::real::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:real.PlayerInfo.type_t)
}

// optional .real.Player player = 2;
inline bool PlayerInfo::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_player() {
  if (player_ != NULL) player_->::real::Player::Clear();
  clear_has_player();
}
inline const ::real::Player& PlayerInfo::player() const {
  // @@protoc_insertion_point(field_get:real.PlayerInfo.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::real::Player* PlayerInfo::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::real::Player;
  // @@protoc_insertion_point(field_mutable:real.PlayerInfo.player)
  return player_;
}
inline ::real::Player* PlayerInfo::release_player() {
  clear_has_player();
  ::real::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void PlayerInfo::set_allocated_player(::real::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:real.PlayerInfo.player)
}

// -------------------------------------------------------------------

// MutableProperty

// optional .real.MetaType type_t = 1 [default = META_TYPE_S2C_MUTABLE_PROPERTY];
inline bool MutableProperty::has_type_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MutableProperty::set_has_type_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MutableProperty::clear_has_type_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MutableProperty::clear_type_t() {
  type_t_ = 506;
  clear_has_type_t();
}
inline ::real::MetaType MutableProperty::type_t() const {
  // @@protoc_insertion_point(field_get:real.MutableProperty.type_t)
  return static_cast< ::real::MetaType >(type_t_);
}
inline void MutableProperty::set_type_t(::real::MetaType value) {
  assert(::real::MetaType_IsValid(value));
  set_has_type_t();
  type_t_ = value;
  // @@protoc_insertion_point(field_set:real.MutableProperty.type_t)
}

// optional int64 player_id = 2;
inline bool MutableProperty::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MutableProperty::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MutableProperty::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MutableProperty::clear_player_id() {
  player_id_ = GOOGLE_LONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::int64 MutableProperty::player_id() const {
  // @@protoc_insertion_point(field_get:real.MutableProperty.player_id)
  return player_id_;
}
inline void MutableProperty::set_player_id(::google::protobuf::int64 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:real.MutableProperty.player_id)
}

// optional int32 speed = 3;
inline bool MutableProperty::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MutableProperty::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MutableProperty::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MutableProperty::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 MutableProperty::speed() const {
  // @@protoc_insertion_point(field_get:real.MutableProperty.speed)
  return speed_;
}
inline void MutableProperty::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:real.MutableProperty.speed)
}

// optional int32 orientation = 4;
inline bool MutableProperty::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MutableProperty::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MutableProperty::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MutableProperty::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 MutableProperty::orientation() const {
  // @@protoc_insertion_point(field_get:real.MutableProperty.orientation)
  return orientation_;
}
inline void MutableProperty::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:real.MutableProperty.orientation)
}

// optional .real.Vector3 position = 5;
inline bool MutableProperty::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MutableProperty::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MutableProperty::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MutableProperty::clear_position() {
  if (position_ != NULL) position_->::real::Vector3::Clear();
  clear_has_position();
}
inline const ::real::Vector3& MutableProperty::position() const {
  // @@protoc_insertion_point(field_get:real.MutableProperty.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::real::Vector3* MutableProperty::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::real::Vector3;
  // @@protoc_insertion_point(field_mutable:real.MutableProperty.position)
  return position_;
}
inline ::real::Vector3* MutableProperty::release_position() {
  clear_has_position();
  ::real::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void MutableProperty::set_allocated_position(::real::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:real.MutableProperty.position)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace real

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::real::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::real::ErrorCode>() {
  return ::real::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::real::MetaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::real::MetaType>() {
  return ::real::MetaType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protocol_2eproto__INCLUDED
