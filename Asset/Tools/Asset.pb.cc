// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Asset.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Asset.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Asset {

namespace {

const ::google::protobuf::Descriptor* Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* Element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Element_reflection_ = NULL;
const ::google::protobuf::Descriptor* Element_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Element_Meta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Asset_2eproto() {
  protobuf_AddDesc_Asset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Asset.proto");
  GOOGLE_CHECK(file != NULL);
  Set_descriptor_ = file->message_type(0);
  static const int Set_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, assetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, protocol_filename_),
  };
  Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Set_descriptor_,
      Set::default_instance_,
      Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Set));
  Element_descriptor_ = file->message_type(1);
  static const int Element_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, metas_),
  };
  Element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Element_descriptor_,
      Element::default_instance_,
      Element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Element));
  Element_Meta_descriptor_ = Element_descriptor_->nested_type(0);
  static const int Element_Meta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Meta, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Meta, index_),
  };
  Element_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Element_Meta_descriptor_,
      Element_Meta::default_instance_,
      Element_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Element_Meta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Asset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Set_descriptor_, &Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Element_descriptor_, &Element::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Element_Meta_descriptor_, &Element_Meta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Asset_2eproto() {
  delete Set::default_instance_;
  delete Set_reflection_;
  delete Element::default_instance_;
  delete Element_reflection_;
  delete Element_Meta::default_instance_;
  delete Element_Meta_reflection_;
}

void protobuf_AddDesc_Asset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Asset.proto\022\005Asset\"i\n\003Set\022\020\n\010username\030"
    "\001 \001(\014\022\020\n\010password\030\002 \001(\014\022\020\n\010filename\030\003 \001("
    "\014\022\021\n\tassetpath\030\004 \001(\014\022\031\n\021protocol_filenam"
    "e\030\005 \001(\014\"R\n\007Element\022\"\n\005metas\030\001 \003(\0132\023.Asse"
    "t.Element.Meta\032#\n\004Meta\022\014\n\004type\030\001 \001(\005\022\r\n\005"
    "index\030\002 \003(\005", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Asset.proto", &protobuf_RegisterTypes);
  Set::default_instance_ = new Set();
  Element::default_instance_ = new Element();
  Element_Meta::default_instance_ = new Element_Meta();
  Set::default_instance_->InitAsDefaultInstance();
  Element::default_instance_->InitAsDefaultInstance();
  Element_Meta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Asset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Asset_2eproto {
  StaticDescriptorInitializer_Asset_2eproto() {
    protobuf_AddDesc_Asset_2eproto();
  }
} static_descriptor_initializer_Asset_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Set::kUsernameFieldNumber;
const int Set::kPasswordFieldNumber;
const int Set::kFilenameFieldNumber;
const int Set::kAssetpathFieldNumber;
const int Set::kProtocolFilenameFieldNumber;
#endif  // !_MSC_VER

Set::Set()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Asset.Set)
}

void Set::InitAsDefaultInstance() {
}

Set::Set(const Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Asset.Set)
}

void Set::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Set::~Set() {
  // @@protoc_insertion_point(destructor:Asset.Set)
  SharedDtor();
}

void Set::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (protocol_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_filename_;
  }
  if (this != default_instance_) {
  }
}

void Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Set_descriptor_;
}

const Set& Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Asset_2eproto();
  return *default_instance_;
}

Set* Set::default_instance_ = NULL;

Set* Set::New() const {
  return new Set;
}

void Set::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_assetpath()) {
      if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        assetpath_->clear();
      }
    }
    if (has_protocol_filename()) {
      if (protocol_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        protocol_filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Asset.Set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // optional bytes filename = 3;
      case 3: {
        if (tag == 26) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_assetpath;
        break;
      }

      // optional bytes assetpath = 4;
      case 4: {
        if (tag == 34) {
         parse_assetpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_assetpath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_protocol_filename;
        break;
      }

      // optional bytes protocol_filename = 5;
      case 5: {
        if (tag == 42) {
         parse_protocol_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protocol_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Asset.Set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Asset.Set)
  return false;
#undef DO_
}

void Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Asset.Set)
  // optional bytes username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->username(), output);
  }

  // optional bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  // optional bytes filename = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->filename(), output);
  }

  // optional bytes assetpath = 4;
  if (has_assetpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->assetpath(), output);
  }

  // optional bytes protocol_filename = 5;
  if (has_protocol_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->protocol_filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Asset.Set)
}

::google::protobuf::uint8* Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Asset.Set)
  // optional bytes username = 1;
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->username(), target);
  }

  // optional bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  // optional bytes filename = 3;
  if (has_filename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->filename(), target);
  }

  // optional bytes assetpath = 4;
  if (has_assetpath()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->assetpath(), target);
  }

  // optional bytes protocol_filename = 5;
  if (has_protocol_filename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->protocol_filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Asset.Set)
  return target;
}

int Set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }

    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }

    // optional bytes assetpath = 4;
    if (has_assetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->assetpath());
    }

    // optional bytes protocol_filename = 5;
    if (has_protocol_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protocol_filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Set::MergeFrom(const Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_assetpath()) {
      set_assetpath(from.assetpath());
    }
    if (from.has_protocol_filename()) {
      set_protocol_filename(from.protocol_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set::CopyFrom(const Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set::IsInitialized() const {

  return true;
}

void Set::Swap(Set* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(filename_, other->filename_);
    std::swap(assetpath_, other->assetpath_);
    std::swap(protocol_filename_, other->protocol_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Set_descriptor_;
  metadata.reflection = Set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Element_Meta::kTypeFieldNumber;
const int Element_Meta::kIndexFieldNumber;
#endif  // !_MSC_VER

Element_Meta::Element_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Asset.Element.Meta)
}

void Element_Meta::InitAsDefaultInstance() {
}

Element_Meta::Element_Meta(const Element_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Asset.Element.Meta)
}

void Element_Meta::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Element_Meta::~Element_Meta() {
  // @@protoc_insertion_point(destructor:Asset.Element.Meta)
  SharedDtor();
}

void Element_Meta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Element_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Element_Meta_descriptor_;
}

const Element_Meta& Element_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Asset_2eproto();
  return *default_instance_;
}

Element_Meta* Element_Meta::default_instance_ = NULL;

Element_Meta* Element_Meta::New() const {
  return new Element_Meta;
}

void Element_Meta::Clear() {
  type_ = 0;
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Element_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Asset.Element.Meta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // repeated int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_index())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Asset.Element.Meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Asset.Element.Meta)
  return false;
#undef DO_
}

void Element_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Asset.Element.Meta)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Asset.Element.Meta)
}

::google::protobuf::uint8* Element_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Asset.Element.Meta)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 index = 2;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Asset.Element.Meta)
  return target;
}

int Element_Meta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 index = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Element_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Element_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Element_Meta::MergeFrom(const Element_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Element_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element_Meta::CopyFrom(const Element_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element_Meta::IsInitialized() const {

  return true;
}

void Element_Meta::Swap(Element_Meta* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Element_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Element_Meta_descriptor_;
  metadata.reflection = Element_Meta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Element::kMetasFieldNumber;
#endif  // !_MSC_VER

Element::Element()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Asset.Element)
}

void Element::InitAsDefaultInstance() {
}

Element::Element(const Element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Asset.Element)
}

void Element::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Element::~Element() {
  // @@protoc_insertion_point(destructor:Asset.Element)
  SharedDtor();
}

void Element::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Element_descriptor_;
}

const Element& Element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Asset_2eproto();
  return *default_instance_;
}

Element* Element::default_instance_ = NULL;

Element* Element::New() const {
  return new Element;
}

void Element::Clear() {
  metas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Asset.Element)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Asset.Element.Meta metas = 1;
      case 1: {
        if (tag == 10) {
         parse_metas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_metas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Asset.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Asset.Element)
  return false;
#undef DO_
}

void Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Asset.Element)
  // repeated .Asset.Element.Meta metas = 1;
  for (int i = 0; i < this->metas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Asset.Element)
}

::google::protobuf::uint8* Element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Asset.Element)
  // repeated .Asset.Element.Meta metas = 1;
  for (int i = 0; i < this->metas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Asset.Element)
  return target;
}

int Element::ByteSize() const {
  int total_size = 0;

  // repeated .Asset.Element.Meta metas = 1;
  total_size += 1 * this->metas_size();
  for (int i = 0; i < this->metas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Element::MergeFrom(const Element& from) {
  GOOGLE_CHECK_NE(&from, this);
  metas_.MergeFrom(from.metas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element::CopyFrom(const Element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {

  return true;
}

void Element::Swap(Element* other) {
  if (other != this) {
    metas_.Swap(&other->metas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Element_descriptor_;
  metadata.reflection = Element_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Asset

// @@protoc_insertion_point(global_scope)
