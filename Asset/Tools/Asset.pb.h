// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Asset.proto

#ifndef PROTOBUF_Asset_2eproto__INCLUDED
#define PROTOBUF_Asset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Asset {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Asset_2eproto();
void protobuf_AssignDesc_Asset_2eproto();
void protobuf_ShutdownFile_Asset_2eproto();

class Set;
class Element;
class Element_Meta;

// ===================================================================

class Set : public ::google::protobuf::Message {
 public:
  Set();
  virtual ~Set();

  Set(const Set& from);

  inline Set& operator=(const Set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Set& default_instance();

  void Swap(Set* other);

  // implements Message ----------------------------------------------

  Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Set& from);
  void MergeFrom(const Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional bytes filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const void* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional bytes assetpath = 4;
  inline bool has_assetpath() const;
  inline void clear_assetpath();
  static const int kAssetpathFieldNumber = 4;
  inline const ::std::string& assetpath() const;
  inline void set_assetpath(const ::std::string& value);
  inline void set_assetpath(const char* value);
  inline void set_assetpath(const void* value, size_t size);
  inline ::std::string* mutable_assetpath();
  inline ::std::string* release_assetpath();
  inline void set_allocated_assetpath(::std::string* assetpath);

  // optional bytes protocol_filename = 5;
  inline bool has_protocol_filename() const;
  inline void clear_protocol_filename();
  static const int kProtocolFilenameFieldNumber = 5;
  inline const ::std::string& protocol_filename() const;
  inline void set_protocol_filename(const ::std::string& value);
  inline void set_protocol_filename(const char* value);
  inline void set_protocol_filename(const void* value, size_t size);
  inline ::std::string* mutable_protocol_filename();
  inline ::std::string* release_protocol_filename();
  inline void set_allocated_protocol_filename(::std::string* protocol_filename);

  // @@protoc_insertion_point(class_scope:Asset.Set)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_assetpath();
  inline void clear_has_assetpath();
  inline void set_has_protocol_filename();
  inline void clear_has_protocol_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* filename_;
  ::std::string* assetpath_;
  ::std::string* protocol_filename_;
  friend void  protobuf_AddDesc_Asset_2eproto();
  friend void protobuf_AssignDesc_Asset_2eproto();
  friend void protobuf_ShutdownFile_Asset_2eproto();

  void InitAsDefaultInstance();
  static Set* default_instance_;
};
// -------------------------------------------------------------------

class Element_Meta : public ::google::protobuf::Message {
 public:
  Element_Meta();
  virtual ~Element_Meta();

  Element_Meta(const Element_Meta& from);

  inline Element_Meta& operator=(const Element_Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Element_Meta& default_instance();

  void Swap(Element_Meta* other);

  // implements Message ----------------------------------------------

  Element_Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Element_Meta& from);
  void MergeFrom(const Element_Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 index = 2;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index(int index) const;
  inline void set_index(int index, ::google::protobuf::int32 value);
  inline void add_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:Asset.Element.Meta)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_Asset_2eproto();
  friend void protobuf_AssignDesc_Asset_2eproto();
  friend void protobuf_ShutdownFile_Asset_2eproto();

  void InitAsDefaultInstance();
  static Element_Meta* default_instance_;
};
// -------------------------------------------------------------------

class Element : public ::google::protobuf::Message {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Element& default_instance();

  void Swap(Element* other);

  // implements Message ----------------------------------------------

  Element* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Element_Meta Meta;

  // accessors -------------------------------------------------------

  // repeated .Asset.Element.Meta metas = 1;
  inline int metas_size() const;
  inline void clear_metas();
  static const int kMetasFieldNumber = 1;
  inline const ::Asset::Element_Meta& metas(int index) const;
  inline ::Asset::Element_Meta* mutable_metas(int index);
  inline ::Asset::Element_Meta* add_metas();
  inline const ::google::protobuf::RepeatedPtrField< ::Asset::Element_Meta >&
      metas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Asset::Element_Meta >*
      mutable_metas();

  // @@protoc_insertion_point(class_scope:Asset.Element)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Asset::Element_Meta > metas_;
  friend void  protobuf_AddDesc_Asset_2eproto();
  friend void protobuf_AssignDesc_Asset_2eproto();
  friend void protobuf_ShutdownFile_Asset_2eproto();

  void InitAsDefaultInstance();
  static Element* default_instance_;
};
// ===================================================================


// ===================================================================

// Set

// optional bytes username = 1;
inline bool Set::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Set::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Set::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Set::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Set::username() const {
  // @@protoc_insertion_point(field_get:Asset.Set.username)
  return *username_;
}
inline void Set::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:Asset.Set.username)
}
inline void Set::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:Asset.Set.username)
}
inline void Set::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Asset.Set.username)
}
inline ::std::string* Set::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Asset.Set.username)
  return username_;
}
inline ::std::string* Set::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Set::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Asset.Set.username)
}

// optional bytes password = 2;
inline bool Set::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Set::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Set::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Set::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Set::password() const {
  // @@protoc_insertion_point(field_get:Asset.Set.password)
  return *password_;
}
inline void Set::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:Asset.Set.password)
}
inline void Set::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:Asset.Set.password)
}
inline void Set::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Asset.Set.password)
}
inline ::std::string* Set::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Asset.Set.password)
  return password_;
}
inline ::std::string* Set::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Set::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Asset.Set.password)
}

// optional bytes filename = 3;
inline bool Set::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Set::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Set::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Set::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Set::filename() const {
  // @@protoc_insertion_point(field_get:Asset.Set.filename)
  return *filename_;
}
inline void Set::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:Asset.Set.filename)
}
inline void Set::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Asset.Set.filename)
}
inline void Set::set_filename(const void* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Asset.Set.filename)
}
inline ::std::string* Set::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Asset.Set.filename)
  return filename_;
}
inline ::std::string* Set::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Set::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Asset.Set.filename)
}

// optional bytes assetpath = 4;
inline bool Set::has_assetpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Set::set_has_assetpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Set::clear_has_assetpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Set::clear_assetpath() {
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    assetpath_->clear();
  }
  clear_has_assetpath();
}
inline const ::std::string& Set::assetpath() const {
  // @@protoc_insertion_point(field_get:Asset.Set.assetpath)
  return *assetpath_;
}
inline void Set::set_assetpath(const ::std::string& value) {
  set_has_assetpath();
  if (assetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    assetpath_ = new ::std::string;
  }
  assetpath_->assign(value);
  // @@protoc_insertion_point(field_set:Asset.Set.assetpath)
}
inline void Set::set_assetpath(const char* value) {
  set_has_assetpath();
  if (assetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    assetpath_ = new ::std::string;
  }
  assetpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:Asset.Set.assetpath)
}
inline void Set::set_assetpath(const void* value, size_t size) {
  set_has_assetpath();
  if (assetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    assetpath_ = new ::std::string;
  }
  assetpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Asset.Set.assetpath)
}
inline ::std::string* Set::mutable_assetpath() {
  set_has_assetpath();
  if (assetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    assetpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Asset.Set.assetpath)
  return assetpath_;
}
inline ::std::string* Set::release_assetpath() {
  clear_has_assetpath();
  if (assetpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = assetpath_;
    assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Set::set_allocated_assetpath(::std::string* assetpath) {
  if (assetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete assetpath_;
  }
  if (assetpath) {
    set_has_assetpath();
    assetpath_ = assetpath;
  } else {
    clear_has_assetpath();
    assetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Asset.Set.assetpath)
}

// optional bytes protocol_filename = 5;
inline bool Set::has_protocol_filename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Set::set_has_protocol_filename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Set::clear_has_protocol_filename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Set::clear_protocol_filename() {
  if (protocol_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_filename_->clear();
  }
  clear_has_protocol_filename();
}
inline const ::std::string& Set::protocol_filename() const {
  // @@protoc_insertion_point(field_get:Asset.Set.protocol_filename)
  return *protocol_filename_;
}
inline void Set::set_protocol_filename(const ::std::string& value) {
  set_has_protocol_filename();
  if (protocol_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_filename_ = new ::std::string;
  }
  protocol_filename_->assign(value);
  // @@protoc_insertion_point(field_set:Asset.Set.protocol_filename)
}
inline void Set::set_protocol_filename(const char* value) {
  set_has_protocol_filename();
  if (protocol_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_filename_ = new ::std::string;
  }
  protocol_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:Asset.Set.protocol_filename)
}
inline void Set::set_protocol_filename(const void* value, size_t size) {
  set_has_protocol_filename();
  if (protocol_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_filename_ = new ::std::string;
  }
  protocol_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Asset.Set.protocol_filename)
}
inline ::std::string* Set::mutable_protocol_filename() {
  set_has_protocol_filename();
  if (protocol_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    protocol_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Asset.Set.protocol_filename)
  return protocol_filename_;
}
inline ::std::string* Set::release_protocol_filename() {
  clear_has_protocol_filename();
  if (protocol_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = protocol_filename_;
    protocol_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Set::set_allocated_protocol_filename(::std::string* protocol_filename) {
  if (protocol_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete protocol_filename_;
  }
  if (protocol_filename) {
    set_has_protocol_filename();
    protocol_filename_ = protocol_filename;
  } else {
    clear_has_protocol_filename();
    protocol_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Asset.Set.protocol_filename)
}

// -------------------------------------------------------------------

// Element_Meta

// optional int32 type = 1;
inline bool Element_Meta::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Element_Meta::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Element_Meta::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Element_Meta::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Element_Meta::type() const {
  // @@protoc_insertion_point(field_get:Asset.Element.Meta.type)
  return type_;
}
inline void Element_Meta::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Asset.Element.Meta.type)
}

// repeated int32 index = 2;
inline int Element_Meta::index_size() const {
  return index_.size();
}
inline void Element_Meta::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 Element_Meta::index(int index) const {
  // @@protoc_insertion_point(field_get:Asset.Element.Meta.index)
  return index_.Get(index);
}
inline void Element_Meta::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:Asset.Element.Meta.index)
}
inline void Element_Meta::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:Asset.Element.Meta.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Element_Meta::index() const {
  // @@protoc_insertion_point(field_list:Asset.Element.Meta.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Element_Meta::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:Asset.Element.Meta.index)
  return &index_;
}

// -------------------------------------------------------------------

// Element

// repeated .Asset.Element.Meta metas = 1;
inline int Element::metas_size() const {
  return metas_.size();
}
inline void Element::clear_metas() {
  metas_.Clear();
}
inline const ::Asset::Element_Meta& Element::metas(int index) const {
  // @@protoc_insertion_point(field_get:Asset.Element.metas)
  return metas_.Get(index);
}
inline ::Asset::Element_Meta* Element::mutable_metas(int index) {
  // @@protoc_insertion_point(field_mutable:Asset.Element.metas)
  return metas_.Mutable(index);
}
inline ::Asset::Element_Meta* Element::add_metas() {
  // @@protoc_insertion_point(field_add:Asset.Element.metas)
  return metas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Asset::Element_Meta >&
Element::metas() const {
  // @@protoc_insertion_point(field_list:Asset.Element.metas)
  return metas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Asset::Element_Meta >*
Element::mutable_metas() {
  // @@protoc_insertion_point(field_mutable_list:Asset.Element.metas)
  return &metas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Asset

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Asset_2eproto__INCLUDED
